{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"supabase-luau","text":"<p>Meet <code>supabase-luau</code>, a ModuleScript for managing Supabase from Roblox Studio.</p>"},{"location":"#what-is-the-use-of-supabase-luau","title":"What is the use of supabase-luau?","text":"<p>The use of supabase-luau is to manage a <code>relational database</code> (SQL) using Postgresql and Supabase.</p> <p>I have made this ModuleScript for the developer community, and also to try to improve data persistence in Roblox, as DataStores can be very annoying and tedious to use.</p>"},{"location":"#what-is-the-purpose-of-supabase-luau","title":"What is the purpose of supabase-luau?","text":"<p>The purpose of supabase-luau is to simplify too much the tedious task of persisting data in your game, it also gives you the benefit of being able to visualize and manage your data in the Supabase dashboard.</p> <p>The purpose of this modulescript is not to replace DataStores, this script was made by and for the community, I do not want to replace the use of DataStores at all, as they can be useful in many cases</p>"},{"location":"#learn-more-about-supabase-luau","title":"Learn more about supabase-luau","text":"<ul> <li>About</li> <li>API</li> <li>Documentation</li> <li>Changelog</li> <li>Devforum topic</li> </ul>"},{"location":"about/","title":"About supabase-luau","text":"<p>You may have wondered why you should use supabase for your projects and games, and why choose this specific module.</p> <p>Next I will tell you about the history of this module, why to use it, and some code examples.</p>"},{"location":"about/#supabase-luau-creation-history","title":"supabase-luau creation history","text":"<p>supabase-luau was mainly thought to use it privately myself, I was developing a game in which I needed to list items from a DataStore, but I still needed to store a table with all the necessary, but the problem is that the OrderedDataStore does not allow to store items other than numbers, so the option I used, was to create 2 DataStores, one which stores an ID that refers to the table of the other DataStore that I want to retrieve.</p> <p>The problem with this system I made, is that it was too slow and the code was not scalable, so I remembered that Supabase had a REST-API which I used to make this easier, once I had finished programming the module, I put it approved. By using it I didn't need to use the system I did before, and my game code went from +500 lines of code to just 1.</p>"},{"location":"about/#why-should-you-use-it","title":"Why should you use it?","text":"<p>This module gives you the ease and benefit of creating relational databases (SQL and Postgresql). It also allows you to filter or modify how the elements of this database are obtained, and you can modify and visualize the records that you have in your database.</p>"},{"location":"about/#benefits-that-supabase-luau-gives-you","title":"Benefits that supabase-luau gives you","text":"<ul> <li>Graphical interface to visualize your records</li> <li>Simple syntax</li> <li>Ease of creating more powerful and secure databases</li> <li>Being able to manage your records manually through a graphical interface</li> <li>Ease of use</li> <li>You don\u2019t need to know much SQL to be able to use it.</li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>In this section you will be able to see the change history of supabase-luau and its documentation, you will also see everything new that has been added to a given version.</p>"},{"location":"changelog/#version-table","title":"Version table","text":"<ul> <li>v1.1.0-rc.1</li> <li>v1.0.0-dev.1</li> </ul>"},{"location":"changelog/#v110-rc1","title":"v1.1.0-rc.1","text":"<ul> <li>Documentation has been completed</li> <li>supabase-luau is now downloadable for Roblox Studio (.rbxm)</li> </ul>"},{"location":"changelog/#v100-dev1","title":"v1.0.0-dev.1","text":"<ul> <li>Topic in the Devforum created</li> <li>Repository has been created on GitHub</li> </ul>"},{"location":"api/supabase-types/","title":"Types","text":"<p>Here will be all types of supabase-luau</p> <p>Represents a Supabase Client</p> <pre><code>export type SupabaseClient = {\n  connection: SupabaseClientConnection,\n  from: (self: SupabaseClient, name: string) -&gt; SupabaseClientConnection,\n}\n</code></pre>"},{"location":"api/supabase-types/#supabaseclient","title":"SupabaseClient","text":""},{"location":"api/supabase-types/#properties","title":"Properties","text":"<ul> <li><code>connection: SupabaseClientConnection</code>: Represents a connection to the database</li> <li><code>from: (self: SupabaseClient, name: string) -&gt; SupabaseClientConnection</code>: Represents the method by which you connect to the database.</li> </ul> <p>Represents the necessary configuration for a Supabase Client</p> <pre><code>export type SupabaseClientSettings = {\n  url: string,\n  apiKey: string,\n}\n</code></pre>"},{"location":"api/supabase-types/#supabaseclientsettings","title":"SupabaseClientSettings","text":""},{"location":"api/supabase-types/#properties_1","title":"Properties","text":"<ul> <li><code>url: string</code>: url of the project</li> <li><code>apiKey: string</code>: api-key of the project</li> </ul> <p>Represents a database</p> <pre><code>export type SupabaseDatabase = {\n  db: {\n    url: string,\n    apiKey: string,\n  },\n}\n</code></pre>"},{"location":"api/supabase-types/#supabaseclientdatabase","title":"SupabaseClientDatabase","text":""},{"location":"api/supabase-types/#properties_2","title":"Properties","text":"<ul> <li><code>url: string</code>: url of the project</li> <li><code>apiKey: string</code>: api-key of the project</li> </ul> <p>Represents a connection to a database along with all allowed methods</p> <pre><code>export type SupabaseClientConnection = {\n  select: (self: SupabaseClientConnection, query: string) -&gt; SupabaseClientConnection,\n  insert: (self: SupabaseClientConnection, value: { string: any }) -&gt; SupabaseClientConnection,\n  update: (\n    self: SupabaseClientConnection,\n    column: string,\n    value: any,\n    record: { string: any }\n  ) -&gt; SupabaseClientConnection,\n  delete: (self: SupabaseClientConnection, column: string, value: any) -&gt; SupabaseClientConnection,\n\n  eq: (self: SupabaseClientConnection, column: string, value: any) -&gt; SupabaseClientConnection,\n  neq: (self: SupabaseClientConnection, column: string, value: any) -&gt; SupabaseClientConnection,\n\n  order: (self: SupabaseClientConnection, column: string, asc: boolean) -&gt; SupabaseClientConnection,\n  limit: (self: SupabaseClientConnection, amount: number) -&gt; SupabaseClientConnection,\n\n  execute: (self: SupabaseClientConnection) -&gt; any,\n}\n</code></pre>"},{"location":"api/supabase-types/#supabaseclientconnection","title":"SupabaseClientConnection","text":""},{"location":"api/supabase-types/#properties_3","title":"Properties","text":"<ul> <li><code>select: (self: SupabaseClientConnection, query: string) -&gt; - SupabaseClientConnection</code>: Represents a database operation</li> <li><code>insert: (self: SupabaseClientConnection, value: { string: any }) -&gt; - SupabaseClientConnection</code>: Represents a database operation</li> <li><code>update: ( self: SupabaseClientConnection, column: string, value: any, record: { string: any } ) -&gt; SupabaseClientConnection</code>: Represents a database operation</li> <li><code>delete: (self: SupabaseClientConnection, column: string, value: any) -&gt; SupabaseClientConnection</code>: Represents a database operation</li> <li><code>eq: (self: SupabaseClientConnection, column: string, value: any) -&gt; SupabaseClientConnection</code>: Represents a database operation</li> <li><code>neq: (self: SupabaseClientConnection, column: string, value: any) -&gt; SupabaseClientConnection</code>: Represents a database operation</li> <li><code>order: (self: SupabaseClientConnection, column: string, asc: boolean) -&gt; SupabaseClientConnection</code>: Represents a database operation</li> <li><code>limit: (self: SupabaseClientConnection, amount: number) -&gt; SupabaseClientConnection</code>: Represents a database operation</li> <li><code>execute: (self: SupabaseClientConnection) -&gt; any</code>: Represents a database operation</li> </ul>"},{"location":"api/supabase/","title":"Supabase","text":""}]}